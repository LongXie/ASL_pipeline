function DARTEL_Norm_SPM8_session...
    (session_dir, template, anat_dir, infile_gz, ref_gz, out_folder, LOGTXT)

%% check input and output
if nargin < 6
    error('Not enough input argument!');
end

% check input extension
[~, infile_filename, ext] = fileparts(infile_gz);
if strcmp(ext, '.gz')
    [~, ~, ext] = fileparts(infile_filename);
    if ~strcmp(ext, '.nii')
        error('Input file`s extension must be .nii.gz');
    end
else
    error('Input file`s extension must be .nii.gz');
end

% check input extension
[~, ref_filename, ext] = fileparts(ref_gz);
if strcmp(ext, '.gz')
    [~, ~, ext] = fileparts(ref_filename);
    if ~strcmp(ext, '.nii')
        error('Reference file`s extension must be .nii.gz');
    end
else
    error('Reference file`s extension must be .nii.gz');
end

%% parameters


%% Find ASL run directories
d = listdir(fullfile(session_dir,'*ASL*'),'dirs');
if isempty(d) %MV
    d = listdir(fullfile(session_dir,'*asl*'),'dirs');
end
nruns = length(d);

if nruns == 0
    msg = sprintf('No ASL directories found in %s.\n',session_dir);
    cmd = sprintf('echo "%s" >> %s', msg, LOGTXT);
    system(cmd);
    fprintf(msg);
    return;
end

%% check if template exist
if ~exist(template, 'file')
    % if not exist, report error
    msg = 'ERROR: Template does not exist in %s.\n';
    system(sprintf('echo "%s" >> %s', msg, LOGTXT));
    error(msg);
end


%% check flow field generated by DARTEL
%anat_dir = fullfile(session_dir, 'MPRAGE', 'NewSegment');

% flow field
[~, template_filename] = fileparts(template);
template_name = strsplit(template_filename, '_');
template_name = template_name{1};
flowfield = fullfile(anat_dir, ['u_rc1MPRAGE_', template_name,'.nii']);

% check if exist
if ~exist(flowfield, 'file') 
    % if not exist, report error
    msg = 'ERROR: Flow field does not exist in %s.\n';
    system(sprintf('echo "%s" >> %s', msg, LOGTXT));
    error(msg);
end

%% Run 
savecurpath = pwd;
for r = 1:nruns
    
    %% initialization
    fprintf('Normalize CBF for run %s (%0.0f/%0.0f).\n', ...
        d{r}, r, nruns);
    run_dir = fullfile(session_dir, d{r});
    
    % generate output folder
    out_dir = fullfile(run_dir, out_folder);
    if isdir(out_dir)
        rmdir(out_dir,'s');
    end
    mkdir(out_dir);
    
    %% check and unzip CBF time series
    cd(run_dir);
    
    % input file
    %infile_gz  = fullfile('clean_SCORE', 'ss_cleaned_meanCBF.nii.gz');
    
    % check if file exist
    if exist(infile_gz, 'file')
        % unzip file for SPM usage
        %[~, infile_filename] = fileparts(infile_gz);
        infile = fullfile(out_dir, infile_filename);
        system(sprintf('gunzip -c %s > %s', infile_gz, infile));
        pause(0.5)
    else
        % if not exist, report error
        msg = sprintf('ERROR: %s does not exist in %s.\n', infile_gz, run_dir);
        system(sprintf('echo "%s" >> %s', msg, LOGTXT));
        error(msg);
    end
    
    %% perform normalization
    clear matlabbatch
    matlabbatch{1}.spm.tools.dartel.mni_norm.template = {template};
    matlabbatch{1}.spm.tools.dartel.mni_norm.data.subj.flowfield = {flowfield};
    matlabbatch{1}.spm.tools.dartel.mni_norm.data.subj.images = {infile};
    matlabbatch{1}.spm.tools.dartel.mni_norm.vox = [2 2 2];
    matlabbatch{1}.spm.tools.dartel.mni_norm.bb = [-90 -126 -72
                                                    90   90  108];
    matlabbatch{1}.spm.tools.dartel.mni_norm.preserve = 0;
    matlabbatch{1}.spm.tools.dartel.mni_norm.fwhm = [8 8 8];
    
    spm_jobman('initcfg');
    spm_jobman('run',matlabbatch);
    
    %% remove the original unzip file and zip the outputfile
    cd(out_dir);
    delete(infile_filename);
    system('gzip *.nii');
    
    %% reslice the normalized map to the MNI
    norm_map = fullfile(out_dir, ['sw', infile_filename, '.gz']);
    cmd = sprintf('c3d %s %s -reslice-identity -o %s', ref_gz, norm_map, norm_map);
    display(cmd)
    system(cmd);
    
end

% back to original dir
cd(savecurpath);
